// Generated by CoffeeScript 1.3.3
(function() {
  var assert, assertEvent, assertEventsSerial, server, store,
    __slice = [].slice;

  server = require('../lib/index').server;

  assert = require('assert');

  store = server().memory();

  assertEvent = function(emitter, _arg, cb) {
    var event, expectedArgs;
    event = _arg[0], expectedArgs = _arg[1];
    return emitter.on(event, function() {
      var args, each, i, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (i = _i = 0, _len = expectedArgs.length; _i < _len; i = ++_i) {
        each = expectedArgs[i];
        assert.equal(args[i], each);
      }
      return cb();
    });
  };

  assertEventsSerial = function(emitter, events, cb) {
    var first, rest;
    if (events.length === 0) {
      return cb();
    } else {
      first = events[0], rest = 2 <= events.length ? __slice.call(events, 1) : [];
      return assertEvent(emitter, first, function() {
        return assertEventsSerial(emitter, rest, cb);
      });
    }
  };

  describe('PluggableStore using Memory adapter', function() {
    describe('read/write', function() {
      it('should write and read an object sync', function() {
        store.write('path1', 'value1');
        return assert.equal(store.read('path1'), 'value1');
      });
      return it('should write and read an object async', function(done) {
        return store.write('path2', 'value2', function() {
          return store.read('path2', function(err, res) {
            assert.equal(res, 'value2');
            return done();
          });
        });
      });
    });
    return describe('events', function() {
      it('should trigger write event on write', function(done) {
        assertEventsSerial(store, [['write', ['path3', 'value3']], ['written', ['path3', 'value3']]], done);
        return store.write('path3', 'value3');
      });
      return it('should trigger read event on read', function(done) {
        assertEvent(store, ['read', ['path3']], done);
        return store.read('path3');
      });
    });
  });

}).call(this);
