// Generated by CoffeeScript 1.3.3
(function() {
  var PluggableStore, wrapAdapter,
    __slice = [].slice;

  PluggableStore = (function() {

    function PluggableStore(_arg) {
      this.adapter = _arg.adapter, this.adapterIsSync = _arg.adapterIsSync;
    }

    PluggableStore.prototype.write = function(key, value, cb) {
      var res;
      if (this.adapterIsSync) {
        res = this.adapter.write(key, value);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.write(key, value, cb);
      }
    };

    PluggableStore.prototype.read = function(key, cb) {
      var res;
      if (this.adapterIsSync) {
        res = this.adapter.read(key);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.read(key, cb);
      }
    };

    PluggableStore.prototype.remove = function(key, cb) {
      return this.adapter.remove(key, cb);
    };

    return PluggableStore;

  })();

  wrapAdapter = function(path, isSync) {
    return function() {
      var adapter, args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      adapter = require(path);
      return new PluggableStore({
        adapter: (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t = typeof result;
          return t == "object" || t == "function" ? result || child : child;
        })(adapter, args, function(){}),
        adapterIsSync: isSync
      });
    };
  };

  module.exports = {
    PluggableStore: PluggableStore,
    browser: function() {
      return {
        localStorage: wrapAdapter('./localstore', true),
        memory: wrapAdapter('./memory', true)
      };
    },
    server: function() {
      return {
        fileSystem: wrapAdapter('./filesystem'),
        memory: wrapAdapter('./memory', true)
      };
    }
  };

}).call(this);
