// Generated by CoffeeScript 1.3.3
(function() {
  var PluggableStore, pipe, wrapAdapter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  PluggableStore = (function(_super) {

    __extends(PluggableStore, _super);

    function PluggableStore(_arg) {
      this.adapter = _arg.adapter, this.isSync = _arg.isSync;
    }

    PluggableStore.prototype.write = function(key, value, cb) {
      var obj, res, written;
      obj = this;
      written = function() {
        return obj.emit('written', key, value);
      };
      this.emit('write', key, value);
      if (this.isSync) {
        res = this.adapter.write(key, value);
        written();
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.write(key, value, function(err, res) {
          written();
          return cb(err, res);
        });
      }
    };

    PluggableStore.prototype.read = function(key, cb) {
      var res;
      this.emit('read', key);
      if (this.isSync) {
        res = this.adapter.read(key);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.read(key, cb);
      }
    };

    PluggableStore.prototype.remove = function(key, cb) {
      return this.adapter.remove(key, cb);
    };

    return PluggableStore;

  })(require('eventemitter2').EventEmitter2);

  pipe = function(fromStore, toStore) {
    return fromStore.on('write', function(key, value) {
      return toStore.write(key, value);
    });
  };

  wrapAdapter = function(path, isSync) {
    return function() {
      var adapter, args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      adapter = require(path);
      return new PluggableStore({
        adapter: (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t = typeof result;
          return t == "object" || t == "function" ? result || child : child;
        })(adapter, args, function(){}),
        isSync: isSync
      });
    };
  };

  module.exports = {
    PluggableStore: PluggableStore,
    browser: function() {
      return {
        localStorage: wrapAdapter('./localstore', true),
        memory: wrapAdapter('./memory', true)
      };
    },
    server: function() {
      return {
        fileSystem: wrapAdapter('./filesystem'),
        memory: wrapAdapter('./memory', true)
      };
    },
    pipe: pipe
  };

}).call(this);
